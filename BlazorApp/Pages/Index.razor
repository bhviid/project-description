@page "/"
@inject HttpClient Http

<PageTitle>GitInsights</PageTitle>

<!--<h1>GitInsights</h1>-->

<p>
    @mode
</p>

<form @onsubmit="DisplayInsights">
    <div class="form-floating mb-3">
        <input @bind-value="githubUser" required type="text" class="form-control" id="floatingInput"
            placeholder="name@example.com">
        <label for="floatingInput">Github username</label>
    </div>
    <div class="form-floating mb-3">
        <input @bind-value="githubRepo" required type="text" class="form-control" id="floatingPassword"
            placeholder="Password">
        <label for="floatingPassword">Github repository name</label>
    </div>
    <select @bind="mode" required class="form-select mb-2" aria-label="Default select example">
        <option value="frequency" selected>Frequency</option>
        <option value="author">Author</option>
        <option value="fork"> Fork</option>
    </select>
    <div class="mb-2">
        <RadzenButton Shade="Shade.Darker" ButtonStyle="ButtonStyle.Dark" ButtonType="Radzen.ButtonType.Submit"
            class="btn-primary btn">Load</RadzenButton>

    </div>
</form>

@switch (mode)
{
    case "frequency":
        <span>
            @insights
            @if (frequencies is not null)
            {
                <RadzenChart ColorScheme="ColorScheme.Palette" Style="height: 600px">
                    <RadzenColumnSeries Data="frequencies" CategoryProperty="Date" ValueProperty="Count" Title="Frequencies"
            LineType="LineType.Dashed">
                    </RadzenColumnSeries>
                    <RadzenColumnOptions Radius="5" Width="20" />
                    <RadzenValueAxis>
                        <RadzenAxisTitle Text="Commits per date" />
                    </RadzenValueAxis>
                </RadzenChart>
            }
        </span>
        break;

    case "fork":
        throw new NotImplementedException();
        break;

    default:
        throw new NotImplementedException();
        break;
}





@code {

    private string insights = "";

    private IEnumerable<FrequencyDTO> frequencies;
    private IEnumerable<AuthorDTO> authors;

    private string mode = "frequency";
    private string githubUser;
    private string githubRepo;

    private async Task DisplayInsights()
    {
        //var response = await Http.GetAsync($":5050/girepo/{mode}/{githubUser}/{githubRepo}");


        //if (response.IsSuccessStatusCode)
        //{
        // insights = await response.Content.ReadAsStringAsync();
        //}

        //var response;
        switch (mode)
        {
            case "frequency":
                frequencies = await Http.GetFromJsonAsync<IEnumerable<FrequencyDTO>>("https://localhost:7009/gitrepo/frequency-test");
                break;
            case "author":
                throw new NotImplementedException();
                //authors = await Http.GetFromJsonAsync<IEnumerable<AuthorDTO>>("https://localhost:7009/gitrepo/author-test");
                break;
            case "fork":
            throw new NotImplementedException();
                break;
            default:
                frequencies = await Http.GetFromJsonAsync<IEnumerable<FrequencyDTO>>("https://localhost:7009/gitrepo/frequency-test");
                break;

        }

    }
}